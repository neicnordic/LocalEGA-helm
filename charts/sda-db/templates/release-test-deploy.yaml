---
{{- define "dbfullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := default .Chart.Name .Values.nameOverride -}}
{{- if contains $name .Release.Name -}}
{{- .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
{{- end -}}

apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test"
  resourceVersion: {{ template "dbfullname" . }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  securityContext:
    runAsUser: 70
    fsGroup: 70
  containers:
    - name: {{ .Release.Name }}-test
      image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag | quote }}
      imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
      {{- if and .Values.global.tls.enabled (not .Values.externalPkiService.tlsPath) }}
      volumeMounts:
        - name: certs
          mountPath: /certs
      {{- end }}
      env:
        {{- if .Values.externalPkiService.tlsPath }}
        - name: PKI_VOLUME_PATH
          value: {{.Values.externalPkiService.tlsPath }}
        {{- end }}
        {{- if .Values.global.tls.enabled }}
        - name: PGSSLMODE
          value: {{ .Values.global.tls.verifyPeer }}
        - name: PGSSL
          value: ".postgresql"
        {{- end }}
        - name: DB_HOST
          value: "{{ template "dbfullname" . }}"
        - name: PGPASSWORD
          valueFrom:
              secretKeyRef:
                name: {{ template "dbfullname" . }}
                key: pgInPasswd             
      command: [ "/bin/bash" ]
      args:
        - "-c"
        {{- if .Values.global.tls.enabled }}
        - 'cd $HOME;
           mkdir -p $PGSSL;
           s=${PKI_VOLUME_PATH:-/certs};
           cp "$s/{{ .Values.global.tls.certName }}" $PGSSL/postgresql.crt;
           cp "$s/{{ .Values.global.tls.keyName }}" $PGSSL/postgresql.key;
           cp "$s/{{ .Values.global.tls.CAFile }}" $PGSSL/root.crt;
           chmod -R og-rw $PGSSL;
           count=1;
           until (psql -h ${DB_HOST} -U lega_in lega -c "select * from local_ega.dbschema_version" || [ "$count" -ge 10 ]); do 
             sleep 10;
             count=$((count+1));
           done |
           grep -F "Created with version"'
        {{- else }}
        - 'count=1;
           until (psql -h ${DB_HOST} -U lega_in lega -c "select * from local_ega.dbschema_version" || [ "$count" -ge 10 ]); do 
             sleep 10;
             count=$((count+1));
           done |
           grep -F "Created with version"'
        {{- end }}
    {{- if and .Values.global.tls.enabled (not .Values.externalPkiService.tlsPath) }}
  volumes:
      - name: certs
        secret:
          secretName: {{ .Values.global.tls.secretName }}
    {{- end }}
  restartPolicy: Never

