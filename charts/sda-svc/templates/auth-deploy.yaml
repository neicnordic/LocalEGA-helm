{{- if or (or (eq "all" .Values.global.deploymentType) (eq "external" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
{{- if eq "s3" .Values.global.inbox.storageType }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sda.fullname" . }}-auth
  labels:
    role: auth
    app: {{ template "sda.fullname" . }}-auth
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.auth.name }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.auth.replicaCount }}
  revisionHistoryLimit: {{ default "3" .Values.global.revisionHistory }}
  selector:
    matchLabels:
      app: {{ template "sda.fullname" . }}-auth
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sda.fullname" . }}-auth
        role: auth
        release: {{ .Release.Name }}
      annotations:
        {{- if not .Values.global.vaultSecrets }}
        checksum/secret: {{ include (print $.Template.BasePath "/auth-secrets.yaml") . | sha256sum }}
        {{- end }}
{{- if .Values.global.podAnnotations }}
{{- toYaml .Values.global.podAnnotations | nindent 8 -}}
{{- end }}
{{- if .Values.auth.annotations }}
{{- toYaml .Values.auth.annotations | nindent 8 -}}
{{- end }}
    spec:
    {{- if .Values.global.rbacEnabled}}
      serviceAccountName: {{ .Release.Name }}
    {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: auth
        image: "{{ .Values.auth.repository }}:{{ .Values.auth.imageTag }}"
        imagePullPolicy: {{ .Values.auth.imagePullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
{{- if .Values.global.extraSecurityContext }}
{{- toYaml .Values.global.extraSecurityContext | nindent 10 -}}
{{- end }}
        env:
        - name: LOG_LEVEL
          value: {{ upper .Values.global.logLevel }}
      {{- if not .Values.global.vaultSecrets }}
        - name: ELIXIR_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-auth
              key: elixirID
        - name: ELIXIR_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-auth
              key: elixirSecret
        {{- if or ( eq "federated" .Values.global.schemaType) ( eq "" .Values.global.schemaType) }}
        - name: CEGA_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-auth
              key: cegaID
        - name: CEGA_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "sda.fullname" . }}-auth
              key: cegaSecret
        {{- end }}
      {{- else }}
        - name: SERVER_CONFFILE
          value: {{ include "confFile" . }}
      {{- end }}
        - name: ELIXIR_REDIRECTURL
          value: "https://{{ .Values.global.ingress.hostName.auth }}/elixir/login"
        - name: ELIXIR_ISSUER
          value: "{{ .Values.global.elixir.oidcdHost }}"
        - name: ELIXIR_SCOPE
          value: "ga4gh_passport_v1"
        {{- if or ( eq "federated" .Values.global.schemaType) ( eq "" .Values.global.schemaType) }}
        - name: CEGA_JWTISSUER
          value: "https://{{ .Values.global.ingress.hostName.auth }}"
        - name: CEGA_AUTHURL
          value: {{ printf "%s%s" (.Values.global.cega.host) "/lega/v1/legas/users/" | quote }}
        - name: CEGA_JWTPRIVATEKEY
          value: "{{ template "secretsPath" . }}/{{ .Values.global.auth.jwtKey }}"
        - name: CEGA_JWTSIGNATUREALG
          value: {{ .Values.global.auth.jwtAlg | quote }}
        {{- end }}
        {{- if .Values.global.auth.useTLS }}
        - name: SERVER_CERT
          value: "{{ template "tlsPath" . }}/auth.crt"
        - name: SERVER_KEY
          value: "{{ template "tlsPath" . }}/auth.key"
        {{- end }}
        - name: S3INBOX
          value: {{ .Values.global.ingress.hostName.s3Inbox }}
        ports:
        - name: auth
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            port: auth
            path: /
            scheme: {{ ternary "HTTP" "HTTPS" ( empty .Values.global.auth.useTLS ) }}
            httpHeaders:
            - name: Host
              value: {{ .Values.global.ingress.hostName.auth }}
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            port: auth
            path: /
            scheme: {{ ternary "HTTP" "HTTPS" ( empty .Values.global.auth.useTLS ) }}
            httpHeaders:
            - name: Host
              value: {{ .Values.global.ingress.hostName.auth }}
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
{{ toYaml .Values.s3Inbox.resources | trim | indent 10 }}
        volumeMounts:
      {{- if not .Values.global.pkiService }}
        - name: tls
          mountPath: {{ include "tlsPath" . }}
      {{- end }}
      {{- if and .Values.global.auth.jwtkey .Values.global.jwtPath }}
        - name: jwt
          mountPath: {{ include "jwtPath" . }}
      {{- end }}
      volumes:
      {{- if and .Values.global.auth.jwtKey .Values.global.jwtPath }}
        - name: jwt
          projected:
            defaultMode: 0440
            sources:
            - secret:
                name: {{ template "sda.fullname" . }}-auth
                items:
                  - key: {{ .Values.global.auth.jwtKey }}
                    path: {{ .Values.global.auth.jwtKey }}
      {{- end }}
      {{- if not .Values.global.pkiService }}
        - name: tls
          secret:
            defaultMode: 0440
            secretName: {{ template "sda.fullname" . }}-auth-certs
      {{- end }}
{{- end }}
{{- end }}
