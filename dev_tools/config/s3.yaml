global:
  c4ghPath: c4gh
  jwtPath: jwt
  tlsPath: tls
  podSecurityPolicy:
    create: false
  archive:
    storageType: s3
    s3Url: "https://minio"
    s3Bucket: "archive"
    s3CaFile: "ca.crt"
    s3AccessKey: idDQBxLpXoM8l88l
    s3SecretKey: ABd6XCIvNWj7JULbrqBf8tB7q9BoHJSc
  auth:
    elixirID: DfCieZLuBU
    elixirSecret: DfCieZLuBU
    jwtSecret: oidc
    jwtAlg: ES256
    jwtKey: token.key
    jwtPub: token.pub
  backupArchive:
    storageType: s3
    s3Url: "https://minio"
    s3Bucket: "backup"
    s3CaFile: "ca.crt"
    s3AccessKey: idDQBxLpXoM8l88l
    s3SecretKey: ABd6XCIvNWj7JULbrqBf8tB7q9BoHJSc
  broker:
    host: "broker-sda-mq"
    exchange: "sda"
    port: 5671
    verifyPeer: true
    password: "admin"
    username: "admin"
    backupRoutingKey: "backup"
  cega:
    host: "cega-users"
    user: "legatest"
    password: 3iSGc5loLN7hu2EwT2Z2CzCT26iUrk3t
  db:
    host: "postgres-sda-db"
  c4gh:
    secretName: c4gh
    keyFile: c4gh.key
    publicFile: c4gh.pub
  elixir:
    oidcdHost: "http://oidc-server:8080"
    jwkPath: ""
  inbox:
    storageType: s3
    # existingClaim: test
    s3Url: "https://minio"
    s3Bucket: "archive"
    s3AccessKey: idDQBxLpXoM8l88l
    s3SecretKey: ABd6XCIvNWj7JULbrqBf8tB7q9BoHJSc
    s3CaFile: ca.crt
    s3ReadyPath: "/minio/health/ready"
  ingress:
    deploy: false
    hostName:
      auth: sda-sda-svc-auth
  logLevel: debug
auth:
  tls:
    secretName: "auth-certs"
    certFile: "auth.crt"
    keyFile: "auth.key"
    caCert: "ca.crt"
backup:
  deploy: true
  tls:
    secretName: "backup-certs"
    certFile: "backup.crt"
    keyFile: "backup.key"
    caCert: "ca.crt"
doa:
  tls:
    secretName: "doa-certs"
    certFile: "doa.crt"
    keyFile: "doa.key.der"
    caCert: "ca.crt"
    javaCert: "cacerts"
finalize:
  tls:
    secretName: "finalize-certs"
    certFile: "finalize.crt"
    keyFile: "finalize.key"
    caCert: "ca.crt"
ingest:
  tls:
    secretName: "ingest-certs"
    certFile: "ingest.crt"
    keyFile: "ingest.key"
    caCert: "ca.crt"
intercept:
  tls:
    secretName: intercept-certs
    certFile: intercept.crt
    keyFile: intercept.key
    caCert: ca.crt
mapper:
  tls:
    secretName: mapper-certs
    certFile: mapper.crt
    keyFile: mapper.key
    caCert: ca.crt
s3Inbox:
  tls:
    secretName: "inbox-certs"
    certFile: "inbox.crt"
    keyFile: "inbox.key"
    caCert: "ca.crt"
verify:
  tls:
    secretName: verify-certs
    certFile: verify.crt
    keyFile: verify.key
    caCert: ca.crt
releasetest:
  run: true
  tls:
    secretName: "tester-certs"
